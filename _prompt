#!/bin/bash
# Marginally extensible, not very portable Bash prompt | Spencer Tipping
# Licensed under the terms of the MIT source code license

function meter {
  local color1=$1
  local color2=$2
  local value1=$3
  local value2=$4

  local total=$((value1 + value2))

  if ((total > 0)); then
    local scaled_v1=$((value1 * 10 / total))
    local scaled_v2=$((10 - scaled_v1))     # To prevent rounding error

    if ((scaled_v2 == 0 && value2 > 0)); then
      # Indicate the presence of some value2
      ((++scaled_v2))
      ((--scaled_v1))
    fi

    local v1=$(head -c$scaled_v1 <<< '..........')
    local v2=$(head -c$scaled_v2 <<< '..........')
    echo "\[\033[1;${color1}m\]$v1\[\033[1;${color2}m\]$v2\[\033[0;0m\]"
  fi
}

function set_ps1 {
  local exit_code=$?

  local left='\[\033[1;32m\]\h\[\033[1;30m\]\W\[\033[0;0m\] '
  local save='\[\033[s\]'
  local load='\[\033[u\]'
  local info=''

  if [[ -d .git ]]; then
    local color=''
    [[ -f .git/index.lock ]] && color=31
    info="$info \[\033[1;${color:-30}m\]g\[\033[1;30m\](\[\033[1;32m\]$(sed 's/.*\///' .git/HEAD | head -c6)\[\033[1;30m\])"
  fi

  [[ -r .test-log ]] && info=" $(meter 32 31 $(grep '^pass' .test-log | wc -l) $(grep '^fail' .test-log | wc -l))$info"
  [[ -r .todo ]]     && info=" \[\033[1;36m\]t$(wc -l < .todo)\[\033[0;0m\]$info"

  if grep 'charging$' /proc/acpi/battery/BAT1/state >& /dev/null; then
    local full_capacity="$(grep full /proc/acpi/battery/BAT1/info | awk '{print $4}')"
    local current_capacity="$(grep remaining /proc/acpi/battery/BAT1/state | awk '{print $3}')"
    local amount_empty=$((full_capacity - current_capacity))
    info=" $(meter 33 30 $current_capacity $amount_empty)$info"
  fi

  if [[ -e /sys/devices/virtual/thermal/thermal_zone0/temp ]]; then
    temperature=$(< /sys/devices/virtual/thermal/thermal_zone0/temp)
    temperature_color=$((30 + (temperature > 70000)))
    info=" \[\033[1;${temperature_color}m\]T${temperature%%000}\[\033[0;0m\]$info"
  fi

  ((exit_code != 0)) && info=" \[\033[1;31m\]e$exit_code\[\033[0;0m\]$info"

  local info_minus_escapes="$(sed 's/\\\[[^]]*\\\]*//g' <<< "$info")"
  local info_minus_escape_brackets="$(sed 's/\\[][]//g' <<< "$info")"
  local width=${#info_minus_escapes}
  local position=$((COLUMNS - width))

  export PS1="$left$save\[\033[${position}G\]\[$info_minus_escape_brackets\]$load\[\033[0;0m\]"
}

export PROMPT_COMMAND=set_ps1
